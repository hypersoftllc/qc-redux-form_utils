
function _flattenErrors(outErrs, errors, prefix) {
  for (let name in errors) {
    let value = errors[name]

    if (typeof value === 'string') {
      outErrs.push([`${prefix}${name}`, value])
    }
    else if (value instanceof Array) {
      for (let i = 0, iLen = value.length; i < iLen; ++i) {
        _flattenErrors(outErrs, value[i], `${prefix}${name}[${i}].`)
      }
    }
    else {
      _flattenErrors(outErrs, value, `${prefix}${name}.`)
    }
  }
}

/**
 * Flattens the hierarchical error structure generated by `redux-form`.
 *
 * @param {object} errors - Errors object as passed to `onSubmitFail`.
 */
export default function flattenErrors(errors) {
  let outErr, outErrs

  if (errors === null || errors === undefined) {
    return errors
  }

  outErrs = []
  _flattenErrors(outErrs, errors, '')

  outErr = {}
  outErrs.forEach((err) => {
    outErr[err[0]] = err[1]
  })

  return outErr
}
